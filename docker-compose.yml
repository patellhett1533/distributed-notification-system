version: "3"

services:
  zookeeper:
    container_name: notification_system_zookeeper
    image: confluentinc/cp-zookeeper:latest
    networks:
      - notify-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./zookeeper/data:/data
      - ./zookeeper/datalog:/datalog

  mongodb:
    container_name: notification_system_mongodb
    image: mongo:4.2.1-bionic
    restart: always
    env_file:
      - ./.env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    ports:
      - ${MONGODB_LOCAL_PORT}:${MONGODB_DOCKER_PORT}
    volumes:
      - dbdata:/data/db
    networks:
      - notify-network

  api:
    container_name: notification_system_api
    depends_on:
      - mongodb
      - kafka
    build: .
    env_file:
      - ./.env
    ports:
      - ${NODE_LOCAL_PORT}:${NODE_DOCKER_PORT}
    environment:
      - DB_HOST=mongodb
      - DB_USER=${MONGODB_USER}
      - DB_PASSWORD=${MONGODB_PASSWORD}
      - DB_NAME=${MONGODB_DATABASE}
      - DB_PORT=${MONGODB_DOCKER_PORT}
    volumes:
      - .:/app
    networks:
      - notify-network

  kafka:
    container_name: notification_system_kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - "29092:29092"
      - "9092:9092"
    networks:
      - notify-network
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    depends_on:
      - zookeeper
    volumes:
      - ./kafka/data:/var/lib/kafka/data

  schema-registry:
    image: confluentinc/cp-schema-registry:5.3.0
    hostname: schema-registry
    container_name: schema-registry
    networks:
      - notify-network
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    depends_on:
      - zookeeper
      - kafka

  kafka-connect:
    image: confluentinc/cp-kafka-connect:5.1.0
    hostname: kafka-connect
    container_name: kafka-connect
    networks:
      - notify-network
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: ‘/usr/share/java,/etc/kafka-connect/jars’
      CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /tmp/omniscient/jars:/etc/kafka-connect/jars
    depends_on:
      - zookeeper
      - kafka
      - schema-registry

volumes:
  dbdata:
  esdata:

networks:
  notify-network:
    driver: bridge
